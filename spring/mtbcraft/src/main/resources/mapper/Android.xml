<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mtbcraft.mapper.AndroidMapper">
<select id="insertRecord" resultType="com.mtbcraft.dto.RidingRecord">
	{call
		declare
		begin
		
		insert into riding_record
		(rr_rider, rr_distance, rr_topspeed, rr_avgspeed, rr_high, rr_gpx, rr_open, rr_breaktime, rr_time, rr_area, rr_name)
		values
		(
		#{rr_rider},
		#{rr_distance},
		#{rr_topspeed},
		#{rr_avgspeed},
		#{rr_high},
		#{rr_gpx},
		#{rr_open},
		#{rr_breaktime},
		#{rr_time},
		#{rr_area},
		#{rr_name}		
		);
		
		update rider set r_point = r_point + #{rr_distance} where r_id = #{rr_rider};
	end
	}
	</select>
	

	<select id="insertRecordWithComp" resultType="com.mtbcraft.dto.RidingRecord">
	{call
		declare
		begin
		insert into riding_record
		(rr_rider, rr_date, rr_distance, rr_topspeed, rr_avgspeed, rr_high, rr_gpx, rr_open, rr_breaktime, rr_time, rr_area, rr_name, rr_like, rr_comp) 
		values
		(
		#{rr_rider},
		#{rr_date},
		#{rr_distance},
		#{rr_topspeed},
		#{rr_avgspeed},
		#{rr_high},
		#{rr_gpx},
		#{rr_open},
		#{rr_breaktime},
		#{rr_time},
		#{rr_area},
		#{rr_name},
		#{rr_like},
		#{rr_comp}
		
		update rider set r_point = r_point + #{rr_distance} where r_id = #{rr_rider};
	end
	}
	</select>
	
<!-- 안드로이드 로그인 -->
	<select id="LoginProcess" parameterType="hashMap" resultType="com.mtbcraft.dto.AnLogin">
		select r_id, r_pw from rider where r_id = #{r_id} and r_pw = #{r_pw}
	</select>
	
	<!-- 내 기록 가져오기 -->
	<select id="readRecord" parameterType="String" resultType="com.mtbcraft.dto.App_RidingRecord">
	select * from riding_record where rr_rider = #{rr_rider} order by rr_date desc
		
	</select>
	
	<select id="getLoginInfo" parameterType="String" resultType="com.mtbcraft.dto.LoginInfo">
		select cj_club, r_nickname, r_image from club_join, rider where r_id = #{LoginId} and cj_rider = #{LoginId} and cj_withdraw is null
	</select>
	
	<!-- 내 기록 상세보기 -->
	<select id="getRidingRecordDetail" parameterType="String" resultType="com.mtbcraft.dto.RidingRecord">
		select * from riding_record where rr_rider = #{rr_rider} and rr_num = #{rr_num}
	</select>
	
	<!-- 내 기록 상세보기 공개여부 업데이트 -->
	<select id="RidingOpenSet" parameterType="Map" resultType="com.mtbcraft.dto.RidingRecord">
		update riding_record set rr_open = #{rr_open} where rr_rider=#{rr_rider} and rr_num=#{rr_num}
	</select>
	
	<!-- 코스보기 -->
	<select id="getCourse" parameterType="String" resultType="com.mtbcraft.dto.App_RidingRecord">
		select * from riding_record where rr_open= '1' order by rr_date desc
	</select>
	
	<!-- 코스 상세 보기 -->
	<select id="getCourseItem" parameterType="String" resultType="com.mtbcraft.dto.App_RidingRecord">
		select * from riding_record where rr_num = #{c_num}
	</select>
	
	<!-- 코스 스크랩 -->
	<select id="insertScrap" parameterType="com.mtbcraft.dto.Scrap_Status">
		insert into scrap_status
		(ss_rider, ss_rnum) values (
		#{ss_rider},
		#{ss_rnum} )
	</select>
	<!-- 좋아요 -->
	
	<select id="insertLike" parameterType="com.mtbcraft.dto.RidingRecord">
		{call
		declare
		begin
		update riding_record set rr_like = #{rr_like}+1 where rr_num = #{rr_num};
		insert into like_status (ls_rider, ls_rnum) values (#{rr_rider}, #{rr_num});
		end
	}
	</select>
	
	<!-- 좋아요 가져오기 -->
	<select id="getLikeCount" parameterType="com.mtbcraft.dto.RidingRecord">
	select rr_num, rr_like, rr_rider from riding_record inner join like_status on(like_status.ls_rnum=riding_record.rr_num and like_status.ls_rider=#{rr_rider})
	</select>
	
	<!-- 좋아요 상태가져오기 -->
	<select id="getLikeStatus" parameterType="Map" resultType="com.mtbcraft.dto.Like_Status">
		select * from like_status where ls_rider=#{ls_rider} and ls_rnum=#{ls_rnum}
	</select>
	
	
	<!-- 내 스크립 리스트 -->
	<select id="getScrap" parameterType="Map" resultType="com.mtbcraft.dto.Scrap_Status">
select ss_rider, rr_rider, rr_date,  rr_name, ss_rnum, rr_avgspeed, rr_distance, rr_high, rr_time, rr_area, rr_gpx from riding_record INNER JOIN
		scrap_status ON(scrap_status.ss_rnum = riding_record.rr_num and scrap_status.SS_RIDER=#{ss_rider}) order by rr_gpx desc
	</select>
	
	<!--  내 스크랩 코스 보기 -->
	<select id="getScrapDetail" parameterType="String" resultType="com.mtbcraft.dto.Scrap_Status">
		select * from riding_record where rr_num = #{ss_rnum}
	</select>
	
	<!-- 스크랩 코스 삭제 -->
	<delete id="delScrap">
		delete from scrap_status where ss_rnum = #{ss_rnum}
	</delete>
	
	<!-- 주행기록전체보기 -->
	<select id="getRidingRecordAll" parameterType="String" resultType="com.mtbcraft.dto.RidingRecord">
		select * from riding_record order by rr_num desc
	</select>
	
	<!-- 주행기록전체보기 -->
	<select id="getRidingRecordAllItem" parameterType="String" resultType="com.mtbcraft.dto.RidingRecord">
		select * from riding_record where rr_num = #{rr_num}
	</select>
	
	<select id="getCompetition" resultType="com.mtbcraft.dto.App_Competition">
		select competition.COMP_NUM, competition.COMP_NAME, competition.COMP_NAME,
    	competition.COMP_BADGE, competition.COMP_CONTENT, competition.COMP_COURSE,
    	competition.COMP_IMAGE, competition.COMP_PERIOD, course.C_GPX , course.c_name
		from competition, course 
		where comp_course = c_num
		order by comp_num
	</select>
	
	<select id="getjoinedComp" parameterType= "String" resultType="String">
		select rr_comp from riding_record where rr_rider = #{rr_rider} and rr_comp is not null order by rr_comp
	</select>
	
	<select id="getCompCourse" parameterType="Integer" resultType="String">
		select c_gpx from course where c_num = #{c_num}
	</select>
	
	<select id="getCompClub" parameterType="Integer" resultType="com.mtbcraft.dto.CompClub">
		select cs_club, cs_score, cb_name, cb_image from competition_status, club where cs_club = cb_num and cs_comp = #{cs_comp} order by cs_score desc
	</select>
	
	<select id="getDanger" parameterType="String" resultType="com.mtbcraft.dto.DangerousArea">
		select * from DANGEROUS_AREA
	</select>
	
	<select id="getCompBadge" parameterType="Integer" resultType="com.mtbcraft.dto.Badge">
		select * from badge where bg_num = #{comp_badge}
	</select>
	
	<select id="getCompScore" parameterType="Integer" resultType="com.mtbcraft.dto.CompScore">
		select rr_avgspeed, R_NICKNAME, R_IMAGE from riding_record, rider where RR_RIDER = R_ID and RR_COMP = #{comp_num} order by r_nickname
	</select>
	
	<select id="updateCompScore" parameterType="hashMap">
	{call
		declare
		begin
		update competition_status SET cs_score = cs_score + #{avg_speed} where cs_comp = #{rr_comp} and cs_club = #{r_club};
		update mission_status set ms_score = ms_score + 1 where ms_type = '2' and ms_rider = #{LoginId};
		end
	}
	</select>
	
	<select id="getCompAllScore" parameterType="Integer" resultType="com.mtbcraft.dto.Competition_Status">
		select * from competition_status where cs_comp = #{comp_num}
	</select>
	
	<select id="updateRank" parameterType="hashMap">
		update competition_status set cs_rank = #{rank} where cs_comp = #{rr_comp} and cs_club = #{r_club}
	</select>
	
	<select id="getMissionStatus" parameterType="String" resultType="com.mtbcraft.dto.Mission_Status">
		select ms_score, ms_type from mission_status where ms_rider = #{LoginId} order by ms_type
	</select>
	
	<select id="getNoClearMission" parameterType="String" resultType="com.mtbcraft.dto.Mission">
		select distinct m_num, m_content, m_type, m_name from mission, mission_complete
		where m_num not in ( select mc_mission from mission_complete where mc_rider = #{LoginIn} )
	</select>
	
		<select id="updateMissionStatus" parameterType="hashMap">
	{call
		declare
		begin
		update mission_status set ms_score = #{typeScore1} where ms_type= '1' and ms_rider = #{LoginId};
		update mission_status set ms_score = #{typeScore2} where ms_type= '3' and ms_rider = #{LoginId};
		end
	}
	</select>
	
	
	<select id="insertMissionCom" parameterType="hashMap">
		insert into mission_complete  ( mc_num, mc_rider, mc_mission, mc_time )
		values ( SQU_MISSIONCOM.nextval, #{LoginId},  #{mc_mission}, #{mc_time} )
	</select>
	
	<select id="getRecord" resultType="com.mtbcraft.dto.RidingRecord">
		<![CDATA[select * from (select * from riding_record order by rr_num desc) where rownum <=1]]>
	</select>
	
	<insert id="Taginsert">
		insert into tag_status (ts_rider, ts_rnum, ts_tag) values (
			#{ts_rider},
			#{ts_rnum},
			#{ts_tag}
		
		
		)
	
	
	</insert>
	
		<select id="getAllMission" parameterType="String" resultType="com.mtbcraft.dto.App_Mission">
		select mission.*, badge.BG_IMAGE, badge.bg_name, ms.MS_SCORE from mission, badge, mission_status ms
		where badge.bg_num = mission.m_badge
    	and m_type = ms.MS_TYPE
    	and ms.MS_RIDER = #{LoginId}
    	union
		select m.*, badge.bg_image, badge.bg_name, m.M_TYPE 
		from mission m, badge
		where m_type = '4'
		and m.M_BADGE = badge.BG_NUM
	</select>
	
	<select id="getComMission" parameterType="String" resultType="String">
		select MC_mission from mission_complete
    	where mc_rider = #{LoginId}
	</select>
	
	<select id="getWhenCom" parameterType="hashMap" resultType="Date">
		select distinct mc_time from mission_complete
		where mc_rider = #{LoginId}
		and mc_mission = #{m_num}
	</select>
	
	<select id="getMisRanking" resultType="com.mtbcraft.dto.App_MissionRanking">
		select mc_rider, r_nickname, r_image, count(*) as how from mission_complete, rider
		where mc_rider = rider.R_ID
		group by mc_rider, r_nickname, r_image
		order by how desc
	</select>
	
	<select id="getCourseRiview" parameterType="int" resultType="com.mtbcraft.dto.App_CourseReview">
		select course_riview.*, r_nickname, r_image from course_riview, rider
		where cr_rnum = #{c_num}
		and r_id = cr_rider
		order by cr_time desc
	</select>

	<select id="updateCourseReview" parameterType="com.mtbcraft.dto.App_CourseReview">
		update course_riview 
		set cr_time = #{cr_time}, cr_content = #{cr_content}, cr_images = #{cr_images}
		where cr_num = #{cr_num}
	</select>
	
	<select id="insertCourseReview" parameterType="com.mtbcraft.dto.App_CourseReview">
		insert into course_riview ( cr_num, cr_rider, cr_time, cr_content, cr_rnum, cr_images)
		values (
		SEQ_COURSEREVIEW.nextval, #{cr_rider}, #{cr_time}, #{cr_content}, #{cr_rnum}, #{cr_images}
		)
	</select>
	
	<delete id="deleteCourseReview" parameterType="String">
		delete course_riview where cr_num = #{cr_num}
	</delete>
	
	<select id="sameCheck" parameterType="String" resultType="Integer">
		select count(*) from rider where r_id = #{LoginId}
	</select>

	<select id="foinsert" resultType="com.mtbcraft.dto.RidingRecord">
		insert into riding_record
		(rr_rider, rr_date, rr_distance, rr_topspeed, rr_avgspeed, rr_high, rr_gpx, rr_open, rr_breaktime, rr_time, rr_area, rr_name, rr_foname)
		values
		(
		#{rr_rider},
		#{rr_date, jdbcType=TIMESTAMP},
		#{rr_distance},
		#{rr_topspeed},
		#{rr_avgspeed},
		#{rr_high},
		#{rr_gpx},
		#{rr_open},
		#{rr_breaktime},
		#{rr_time},
		#{rr_area},
		#{rr_name},
		#{rr_foname}
		)
	</select>

	<select id="foupdate" parameterType="String" resultType="com.mtbcraft.dto.RidingRecord">
		update riding_record set rr_name = rr_name+1 where rr_name=#{rr_foname}
	</select>

	<select id="getClubUser" parameterType="String" resultType="com.mtbcraft.dto.LoginInfo">
		select cb_name from club where cb_num= (select cj_num from club_join where cj_rider=#{LoginId})
	</select>
	
	<select id="insertDanger" parameterType="com.mtbcraft.dto.DangerousArea">
		insert into dangerous_area values
		(
		seq_dangerousarea.nextval,
		#{da_rider},
		#{da_latitude},
		#{da_addr},
		#{da_image},
		0,
		#{da_content},
		#{da_longitude}
		)
	</select>
</mapper>